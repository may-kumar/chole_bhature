#include "cordiccart2pol.h"

// #include "cordic_LUTs.hpp"
#include <math.h>

// Define the LUT arrays for both synthesis and simulation
// #ifdef __SYNTHESIS__
// volatile data_t my_LUT_th[LUT_SIZE] = {0};
// volatile data_t my_LUT_r[LUT_SIZE] = {0};
// #else
// data_t my_LUT_th[LUT_SIZE] = {0};
// data_t my_LUT_r[LUT_SIZE] = {0};
// #endif


// void init_cart2pol_LUTs(data_t my_LUT_th[LUT_SIZE], data_t my_LUT_r[LUT_SIZE])
// {
// 	// Fill the LUT values with their appropriate R and theta values
// 	for(int i=0; i<LUT_SIZE; i++){
// 		ap_uint<2*W> index = i;
// 		ap_fixed<W, I, AP_RND, AP_WRAP, 1> fixed_x;
// 		ap_fixed<W, I, AP_RND, AP_WRAP, 1> fixed_y;

// 		for(int j = 0; j < W; j++)
// 			{
// 				fixed_x[W-1-j] = index[2*W-1-j];
// 				fixed_y[W-1-j] = index[W-1-j];
// 			}

// 		float _x = fixed_x;
// 		float _y = fixed_y;

// 		if((_x == 0) & (_y == 0)){
// 			my_LUT_th[index] = 0;
// 			my_LUT_r[index]  = 0;
// 		}
// 		else{
// 			my_LUT_th[index] = atan2f(_y, _x);
// 			my_LUT_r[index]  = sqrtf((_y*_y)+(_x*_x));
// 		}
// 	}
// }

void cordiccart2pol(data_t x, data_t y, data_t * r,  data_t * theta)
{
//#ifdef __SYNTHESIS__
	//#include "cordic_LUTs.hpp"
	//data_t my_LUT_th[LUT_SIZE] = {0};
	//data_t my_LUT_r[LUT_SIZE] = {0};
	//#pragma HLS bind_storage variable=my_LUT_th type=RAM_1P    
	//#pragma HLS bind_storage variable=my_LUT_r type=RAM_1P
	// Initialize LUTs with actual values to prevent optimization
	// static bool initialized = false;
	// if (!initialized) {
	// 	for (int i = 0; i < LUT_SIZE; i++) {
	// 		my_LUT_th[i] = 0;
	// 		my_LUT_r[i] = 0;
	// 	}
	// 	initialized = true;
//#endif
	const data_t my_LUT_th[] = {0.0, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, 1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, -1.5707963705062866, 0.0, 0.7853981852531433, 1.1071487665176392, 1.249045729637146, 1.3258177042007446, 1.3734008073806763, 1.4056476354599, 1.4288992881774902, -1.4464412927627563, -1.4288992881774902, -1.4056476354599, -1.3734008073806763, -1.3258177042007446, -1.249045729637146, -1.1071487665176392, -0.7853981852531433, 0.0, 0.46364760398864746, 0.7853981852531433, 0.9827937483787537, 1.1071487665176392, 1.1902899742126465, 1.249045729637146, 1.292496681213379, -1.3258177042007446, -1.292496681213379, -1.249045729637146, -1.1902899742126465, -1.1071487665176392, -0.9827937483787537, -0.7853981852531433, -0.46364760398864746, 0.0, 0.32175055146217346, 0.588002622127533, 0.7853981852531433, 0.9272952079772949, 1.0303767919540405, 1.1071487665176392, 1.1659045219421387, -1.2120256423950195, -1.1659045219421387, -1.1071487665176392, -1.0303767919540405, -0.9272952079772949, -0.7853981852531433, -0.588002622127533, -0.32175055146217346, 0.0, 0.244978666305542, 0.46364760398864746, 0.6435011029243469, 0.7853981852531433, 0.8960554003715515, 0.9827937483787537, 1.0516501665115356, -1.1071487665176392, -1.0516501665115356, -0.9827937483787537, -0.8960554003715515, -0.7853981852531433, -0.6435011029243469, -0.46364760398864746, -0.244978666305542, 0.0, 0.19739556312561035, 0.38050636649131775, 0.5404195189476013, 0.6747409701347351, 0.7853981852531433, 0.876058042049408, 0.9505468606948853, -1.0121970176696777, -0.9505468606948853, -0.876058042049408, -0.7853981852531433, -0.6747409701347351, -0.5404195189476013, -0.38050636649131775, -0.19739556312561035, 0.0, 0.16514867544174194, 0.32175055146217346, 0.46364760398864746, 0.588002622127533, 0.6947382688522339, 0.7853981852531433, 0.8621700406074524, -0.9272952079772949, -0.8621700406074524, -0.7853981852531433, -0.6947382688522339, -0.588002622127533, -0.46364760398864746, -0.32175055146217346, -0.16514867544174194, 0.0, 0.141897052526474, 0.2782996594905853, 0.4048917889595032, 0.5191460847854614, 0.6202495098114014, 0.7086262702941895, 0.7853981852531433, -0.8519663214683533, -0.7853981852531433, -0.7086262702941895, -0.6202495098114014, -0.5191460847854614, -0.4048917889595032, -0.2782996594905853, -0.141897052526474, 3.1415927410125732, 3.017237663269043, 2.8966140747070312, 2.7828218936920166, 2.677945137023926, 2.582993268966675, 2.498091459274292, 2.422762632369995, -2.356194496154785, -2.422762632369995, -2.498091459274292, -2.582993268966675, -2.677945137023926, -2.7828218936920166, -2.8966140747070312, -3.017237663269043, 3.1415927410125732, 2.9996955394744873, 2.863292932510376, 2.7367007732391357, 2.6224465370178223, 2.521343231201172, 2.432966470718384, 2.356194496154785, -2.289626359939575, -2.356194496154785, -2.432966470718384, -2.521343231201172, -2.6224465370178223, -2.7367007732391357, -2.863292932510376, -2.9996955394744873, 3.1415927410125732, 2.9764440059661865, 2.8198421001434326, 2.677945137023926, 2.5535900592803955, 2.44685435295105, 2.356194496154785, 2.2794225215911865, -2.2142975330352783, -2.2794225215911865, -2.356194496154785, -2.44685435295105, -2.5535900592803955, -2.677945137023926, -2.8198421001434326, -2.9764440059661865, 3.1415927410125732, 2.944197177886963, 2.7610862255096436, 2.601173162460327, 2.4668517112731934, 2.356194496154785, 2.2655346393585205, 2.1910457611083984, -2.1293957233428955, -2.1910457611083984, -2.2655346393585205, -2.356194496154785, -2.4668517112731934, -2.601173162460327, -2.7610862255096436, -2.944197177886963, 3.1415927410125732, 2.8966140747070312, 2.677945137023926, 2.498091459274292, 2.356194496154785, 2.245537281036377, 2.158798933029175, 2.089942455291748, -2.0344438552856445, -2.089942455291748, -2.158798933029175, -2.245537281036377, -2.356194496154785, -2.498091459274292, -2.677945137023926, -2.8966140747070312, 3.1415927410125732, 2.8198421001434326, 2.5535900592803955, 2.356194496154785, 2.2142975330352783, 2.111215829849243, 2.0344438552856445, 1.975688099861145, -1.9295669794082642, -1.975688099861145, -2.0344438552856445, -2.111215829849243, -2.2142975330352783, -2.356194496154785, -2.5535900592803955, -2.8198421001434326, 3.1415927410125732, 2.677945137023926, 2.356194496154785, 2.158798933029175, 2.0344438552856445, 1.9513026475906372, 1.8925468921661377, 1.8490959405899048, -1.8157750368118286, -1.8490959405899048, -1.8925468921661377, -1.9513026475906372, -2.0344438552856445, -2.158798933029175, -2.356194496154785, -2.677945137023926, 3.1415927410125732, 2.356194496154785, 2.0344438552856445, 1.8925468921661377, 1.8157750368118286, 1.768191933631897, 1.7359449863433838, 1.7126933336257935, -1.6951513290405273, -1.7126933336257935, -1.7359449863433838, -1.768191933631897, -1.8157750368118286, -1.8925468921661377, -2.0344438552856445, -2.356194496154785, };
	const data_t my_LUT_r[] = {0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 1.75, 1.5, 1.25, 1.0, 0.75, 0.5, 0.25, 0.25, 0.3535533845424652, 0.55901700258255, 0.7905694246292114, 1.0307763814926147, 1.2747548818588257, 1.520690679550171, 1.7677669525146484, 2.015564441680908, 1.7677669525146484, 1.520690679550171, 1.2747548818588257, 1.0307763814926147, 0.7905694246292114, 0.55901700258255, 0.3535533845424652, 0.5, 0.55901700258255, 0.7071067690849304, 0.9013878107070923, 1.1180340051651, 1.346291184425354, 1.5811388492584229, 1.820027470588684, 2.0615527629852295, 1.820027470588684, 1.5811388492584229, 1.346291184425354, 1.1180340051651, 0.9013878107070923, 0.7071067690849304, 0.55901700258255, 0.75, 0.7905694246292114, 0.9013878107070923, 1.0606601238250732, 1.25, 1.457737922668457, 1.6770509481430054, 1.9039433002471924, 2.136000871658325, 1.9039433002471924, 1.6770509481430054, 1.457737922668457, 1.25, 1.0606601238250732, 0.9013878107070923, 0.7905694246292114, 1.0, 1.0307763814926147, 1.1180340051651, 1.25, 1.4142135381698608, 1.6007810831069946, 1.8027756214141846, 2.015564441680908, 2.2360680103302, 2.015564441680908, 1.8027756214141846, 1.6007810831069946, 1.4142135381698608, 1.25, 1.1180340051651, 1.0307763814926147, 1.25, 1.2747548818588257, 1.346291184425354, 1.457737922668457, 1.6007810831069946, 1.7677669525146484, 1.9525624513626099, 2.1505813598632812, 2.3584952354431152, 2.1505813598632812, 1.9525624513626099, 1.7677669525146484, 1.6007810831069946, 1.457737922668457, 1.346291184425354, 1.2747548818588257, 1.5, 1.520690679550171, 1.5811388492584229, 1.6770509481430054, 1.8027756214141846, 1.9525624513626099, 2.1213202476501465, 2.3048861026763916, 2.5, 2.3048861026763916, 2.1213202476501465, 1.9525624513626099, 1.8027756214141846, 1.6770509481430054, 1.5811388492584229, 1.520690679550171, 1.75, 1.7677669525146484, 1.820027470588684, 1.9039433002471924, 2.015564441680908, 2.1505813598632812, 2.3048861026763916, 2.4748737812042236, 2.657536506652832, 2.4748737812042236, 2.3048861026763916, 2.1505813598632812, 2.015564441680908, 1.9039433002471924, 1.820027470588684, 1.7677669525146484, 2.0, 2.015564441680908, 2.0615527629852295, 2.136000871658325, 2.2360680103302, 2.3584952354431152, 2.5, 2.657536506652832, 2.8284270763397217, 2.657536506652832, 2.5, 2.3584952354431152, 2.2360680103302, 2.136000871658325, 2.0615527629852295, 2.015564441680908, 1.75, 1.7677669525146484, 1.820027470588684, 1.9039433002471924, 2.015564441680908, 2.1505813598632812, 2.3048861026763916, 2.4748737812042236, 2.657536506652832, 2.4748737812042236, 2.3048861026763916, 2.1505813598632812, 2.015564441680908, 1.9039433002471924, 1.820027470588684, 1.7677669525146484, 1.5, 1.520690679550171, 1.5811388492584229, 1.6770509481430054, 1.8027756214141846, 1.9525624513626099, 2.1213202476501465, 2.3048861026763916, 2.5, 2.3048861026763916, 2.1213202476501465, 1.9525624513626099, 1.8027756214141846, 1.6770509481430054, 1.5811388492584229, 1.520690679550171, 1.25, 1.2747548818588257, 1.346291184425354, 1.457737922668457, 1.6007810831069946, 1.7677669525146484, 1.9525624513626099, 2.1505813598632812, 2.3584952354431152, 2.1505813598632812, 1.9525624513626099, 1.7677669525146484, 1.6007810831069946, 1.457737922668457, 1.346291184425354, 1.2747548818588257, 1.0, 1.0307763814926147, 1.1180340051651, 1.25, 1.4142135381698608, 1.6007810831069946, 1.8027756214141846, 2.015564441680908, 2.2360680103302, 2.015564441680908, 1.8027756214141846, 1.6007810831069946, 1.4142135381698608, 1.25, 1.1180340051651, 1.0307763814926147, 0.75, 0.7905694246292114, 0.9013878107070923, 1.0606601238250732, 1.25, 1.457737922668457, 1.6770509481430054, 1.9039433002471924, 2.136000871658325, 1.9039433002471924, 1.6770509481430054, 1.457737922668457, 1.25, 1.0606601238250732, 0.9013878107070923, 0.7905694246292114, 0.5, 0.55901700258255, 0.7071067690849304, 0.9013878107070923, 1.1180340051651, 1.346291184425354, 1.5811388492584229, 1.820027470588684, 2.0615527629852295, 1.820027470588684, 1.5811388492584229, 1.346291184425354, 1.1180340051651, 0.9013878107070923, 0.7071067690849304, 0.55901700258255, 0.25, 0.3535533845424652, 0.55901700258255, 0.7905694246292114, 1.0307763814926147, 1.2747548818588257, 1.520690679550171, 1.7677669525146484, 2.015564441680908, 1.7677669525146484, 1.520690679550171, 1.2747548818588257, 1.0307763814926147, 0.7905694246292114, 0.55901700258255, 0.3535533845424652, };

	// Convert the inputs to internal fixed point representation
	ap_fixed<W, I, AP_RND, AP_WRAP, 1> fixed_x = x;
	ap_fixed<W, I, AP_RND, AP_WRAP, 1> fixed_y = y;

	// Build the index to find the entries in the LUT.
	ap_uint<2*W> index;

	// Concatenate x and y to create the index into the LUTs. x is upper half; y is lower half.
	for(int i = 0; i < W; i++)
	{
#pragma HLS UNROLL
		index[2*W-1-i] = fixed_x[W-1-i];
		index[W-1-i]   = fixed_y[W-1-i];
	}

	// Get the result from the LUTs and write it back to the outputs
	*r     = my_LUT_r[index];
	*theta = my_LUT_th[index];
}
