// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cordiccart2pol_cordiccart2pol_Pipeline_VITIS_LOOP_115_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ans_theta,
        y_1,
        x_1,
        ans_theta_2_out,
        ans_theta_2_out_ap_vld,
        x_3_out,
        x_3_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] ans_theta;
input  [15:0] y_1;
input  [15:0] x_1;
output  [15:0] ans_theta_2_out;
output   ans_theta_2_out_ap_vld;
output  [15:0] x_3_out;
output   x_3_out_ap_vld;

reg ap_idle;
reg ans_theta_2_out_ap_vld;
reg x_3_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln115_reg_299;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] angles_address0;
wire   [12:0] angles_q0;
reg   [3:0] i1_load_reg_288;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln115_fu_135_p2;
reg   [15:0] x_23_load_reg_303;
wire    ap_block_pp0_stage1_11001;
reg   [15:0] y_24_load_reg_308;
wire   [0:0] icmp_ln116_fu_147_p2;
reg   [0:0] icmp_ln116_reg_313;
wire   [15:0] x_shift_fu_170_p2;
reg   [15:0] x_shift_reg_318;
wire   [15:0] y_shift_fu_190_p2;
reg   [15:0] y_shift_reg_323;
reg   [12:0] angles_load_reg_328;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln115_fu_130_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] i1_fu_46;
wire   [3:0] i_fu_196_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i1_load;
reg   [15:0] x_23_fu_50;
wire   [15:0] x_fu_236_p2;
wire    ap_block_pp0_stage1;
reg   [15:0] y_24_fu_54;
wire   [15:0] y_fu_241_p2;
reg   [15:0] ans_theta_16_fu_58;
wire   [15:0] ans_theta_2_fu_229_p2;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_idle_pp0_0to0;
wire    ap_block_pp0_stage0_01001;
reg    angles_ce0_local;
wire   [15:0] sub_ln116_fu_153_p2;
wire   [15:0] select_ln116_fu_159_p3;
wire   [15:0] zext_ln116_fu_167_p1;
wire   [15:0] sub_ln117_fu_176_p2;
wire   [15:0] select_ln117_fu_182_p3;
wire   [13:0] zext_ln119_fu_209_p1;
wire   [13:0] sub_ln119_fu_212_p2;
wire   [13:0] select_ln119_fu_218_p3;
wire  signed [15:0] sext_ln119_fu_225_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i1_fu_46 = 4'd0;
#0 x_23_fu_50 = 16'd0;
#0 y_24_fu_54 = 16'd0;
#0 ans_theta_16_fu_58 = 16'd0;
#0 ap_done_reg = 1'b0;
end

cordiccart2pol_cordiccart2pol_Pipeline_VITIS_LOOP_115_1_angles_ROM_AUTO_1R #(
    .DataWidth( 13 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
angles_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(angles_address0),
    .ce0(angles_ce0_local),
    .q0(angles_q0)
);

cordiccart2pol_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ans_theta_16_fu_58 <= ans_theta;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ans_theta_16_fu_58 <= ans_theta_2_fu_229_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_condition_exit_pp0_iter1_stage0) & (ap_idle_pp0_0to0 == 1'b1)))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i1_fu_46 <= 4'd0;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i1_fu_46 <= i_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_23_fu_50 <= x_1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            x_23_fu_50 <= x_fu_236_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            y_24_fu_54 <= y_1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            y_24_fu_54 <= y_fu_241_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        angles_load_reg_328 <= angles_q0;
        icmp_ln116_reg_313 <= icmp_ln116_fu_147_p2;
        x_23_load_reg_303 <= x_23_fu_50;
        x_shift_reg_318 <= x_shift_fu_170_p2;
        y_24_load_reg_308 <= y_24_fu_54;
        y_shift_reg_323 <= y_shift_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i1_load_reg_288 <= ap_sig_allocacmp_i1_load;
        icmp_ln115_reg_299 <= icmp_ln115_fu_135_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        angles_ce0_local = 1'b1;
    end else begin
        angles_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln115_reg_299 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ans_theta_2_out_ap_vld = 1'b1;
    end else begin
        ans_theta_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln115_reg_299 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln115_reg_299 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i1_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i1_load = i1_fu_46;
    end
end

always @ (*) begin
    if (((icmp_ln115_reg_299 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        x_3_out_ap_vld = 1'b1;
    end else begin
        x_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((1'b1 == ap_condition_exit_pp0_iter1_stage0) & (ap_idle_pp0_0to0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign angles_address0 = zext_ln115_fu_130_p1;

assign ans_theta_2_fu_229_p2 = ($signed(ans_theta_16_fu_58) - $signed(sext_ln119_fu_225_p1));

assign ans_theta_2_out = ($signed(ans_theta_16_fu_58) - $signed(sext_ln119_fu_225_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign i_fu_196_p2 = (i1_load_reg_288 + 4'd1);

assign icmp_ln115_fu_135_p2 = ((ap_sig_allocacmp_i1_load == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln116_fu_147_p2 = (($signed(y_24_fu_54) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign select_ln116_fu_159_p3 = ((icmp_ln116_fu_147_p2[0:0] == 1'b1) ? sub_ln116_fu_153_p2 : y_24_fu_54);

assign select_ln117_fu_182_p3 = ((icmp_ln116_fu_147_p2[0:0] == 1'b1) ? sub_ln117_fu_176_p2 : x_23_fu_50);

assign select_ln119_fu_218_p3 = ((icmp_ln116_reg_313[0:0] == 1'b1) ? sub_ln119_fu_212_p2 : zext_ln119_fu_209_p1);

assign sext_ln119_fu_225_p1 = $signed(select_ln119_fu_218_p3);

assign sub_ln116_fu_153_p2 = (16'd0 - y_24_fu_54);

assign sub_ln117_fu_176_p2 = (16'd0 - x_23_fu_50);

assign sub_ln119_fu_212_p2 = (14'd0 - zext_ln119_fu_209_p1);

assign x_3_out = (x_23_load_reg_303 - x_shift_reg_318);

assign x_fu_236_p2 = (x_23_load_reg_303 - x_shift_reg_318);

assign x_shift_fu_170_p2 = $signed(select_ln116_fu_159_p3) >>> zext_ln116_fu_167_p1;

assign y_fu_241_p2 = (y_shift_reg_323 + y_24_load_reg_308);

assign y_shift_fu_190_p2 = $signed(select_ln117_fu_182_p3) >>> zext_ln116_fu_167_p1;

assign zext_ln115_fu_130_p1 = ap_sig_allocacmp_i1_load;

assign zext_ln116_fu_167_p1 = i1_load_reg_288;

assign zext_ln119_fu_209_p1 = angles_load_reg_328;

endmodule //cordiccart2pol_cordiccart2pol_Pipeline_VITIS_LOOP_115_1
