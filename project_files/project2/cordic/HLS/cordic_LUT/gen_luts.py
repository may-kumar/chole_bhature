#!/usr/bin/env python3
""" Generate CORDIC LUTs
Note: The code generation is assisted by GitHub Copilot.
Author: Wuqiong Zhao (wqzhao@ucsd.edu)
"""
import numpy as np

LUT_HEADER_FILE = "cordic_LUTs.hpp"

def init_cart2pol_LUTs(LUT_SIZE, W, I):
    """
    Emulate Vivado HLS ap_fixed<W,I> creation from bitfields:
      - bits are assigned directly to the ap_fixed bit positions (MSB = sign)
      - interpret the W-bit pattern as two's-complement signed integer
      - scale by 2^(W-I) fractional bits
    Can be better optimized for Python generation speed, but forget it for now.
    """
    my_LUT_th = np.zeros(LUT_SIZE, dtype=np.float32)
    my_LUT_r = np.zeros(LUT_SIZE, dtype=np.float32)

    F = W - I  # fractional bits

    for i in range(LUT_SIZE):
        index = i
        fixed_x_int = 0
        fixed_y_int = 0

        # build the raw W-bit integers from the 2W-bit index exactly as HLS does
        for j in range(W):
            # bit position in the packed index
            bx = (index >> (2 * W - 1 - j)) & 1
            by = (index >> (W - 1 - j)) & 1
            fixed_x_int |= (bx << (W - 1 - j))
            fixed_y_int |= (by << (W - 1 - j))

        # convert W-bit two's-complement representation to signed integer
        sign_mask = 1 << (W - 1)
        full_mask = 1 << W

        if fixed_x_int & sign_mask:
            fixed_x_signed = fixed_x_int - full_mask
        else:
            fixed_x_signed = fixed_x_int

        if fixed_y_int & sign_mask:
            fixed_y_signed = fixed_y_int - full_mask
        else:
            fixed_y_signed = fixed_y_int

        # scale by fractional bits to get the real value (ap_fixed semantics)
        _x = float(fixed_x_signed) / (1 << F)
        _y = float(fixed_y_signed) / (1 << F)

        if _x == 0.0 and _y == 0.0:
            my_LUT_th[i] = 0.0
            my_LUT_r[i] = 0.0
        else:
            my_LUT_th[i] = np.arctan2(_y, _x)
            my_LUT_r[i] = np.hypot(_x, _y)

    return my_LUT_th, my_LUT_r

def main():
    all_W = np.array([4, 5, 6, 7, 8, 9, 10])
    I = 2
    all_LUT_sizes = 2 ** (2 * all_W)

    # save to a header file, with data type data_t
    with open(LUT_HEADER_FILE, "w") as f:
        f.write("// This header file is generated by gen_luts.py\n")
        f.write("// Author: Wuqiong Zhao (wqzhao@ucsd.edu)\n\n")
        f.write("#ifndef __CORDIC_LUTS_HPP__\n")
        f.write("#define __CORDIC_LUTS_HPP__\n\n")
        f.write("#include \"cordiccart2pol.h\"\n\n")

        for idx, W in enumerate(all_W):
            LUT_SIZE = all_LUT_sizes[idx]
            my_LUT_th, my_LUT_r = init_cart2pol_LUTs(LUT_SIZE, W, I)

            f.write(f"#if W1 == {W}\n\n")
            f.write(f"const data_t my_LUT_th[] = {{")
            for i in range(LUT_SIZE):
                f.write(f"{my_LUT_th[i]}, ")
            f.write("};\n")

            f.write(f"const data_t my_LUT_r[] = {{")
            for i in range(LUT_SIZE):
                f.write(f"{my_LUT_r[i]}, ")
            f.write("};\n\n")
            f.write(f"#endif // W == {W}\n\n")

        f.write("#endif // __CORDIC_LUTS_HPP__\n")

    print(f"LUTs generated and saved to {LUT_HEADER_FILE}")

if __name__ == "__main__":
    main()
